// ===================================================================
// Contact
// Phone Number Formatting
// ===================================================================

/* -------------------------------------------------------------------
   FEATURES:
   
   - Progressive Dutch phone number formatting (+31 format)
   - Smart cursor positioning during formatting
   - Real-time formatting as user types (6 -> (+31) 6)
   - Support for mobile, landline, and international formats
   - Handles 06, 6, 31, and landline patterns
   - Auto-initialization on all tel inputs
   - Dynamic form observation for Webflow compatibility
   - Performance optimized with regex caching
   - Accessibility compliant
   - Public API for external use
-------------------------------------------------------------------*/

(() => {
  // Performance: Cache regex patterns
  const REGEX_CACHE = {
    DIGITS_ONLY: /\D/g,
    HAS_DIGIT: /\d/,
    VALID_CHARS: /[^\d\s()+\-]/g,
    COUNTRY_CODE: /^\+?\d{1,3}/,
    DUTCH_MOBILE: /^(?:\+?31|0)?6\d{8}$/,
    DUTCH_LANDLINE: /^(?:\+?31|0)?[1-578]\d{8}$/
  };


  /* -------------------------------------------------------------------
     1. Core Utility Functions
  -------------------------------------------------------------------*/

  /**
   * Extract digits from phone number string
   * @param {string} value - Raw input value
   * @returns {string} Digits only
   */
  function extractDigits(value) {
    return value.replace(REGEX_CACHE.DIGITS_ONLY, '');
  }

  /**
   * Determine phone number type and country (progressive detection)
   * @param {string} digits - Digits only string
   * @returns {{country: string, type: string} | null}
   */
  function detectPhoneType(digits) {
    // Handle empty inputs
    if (!digits) {
      return null;
    }

    // Dutch international format (starting with 31)
    if (digits.startsWith('31')) {
      return { country: 'NL', type: 'international' };
    }
    
    // Dutch mobile format (starts with 6 or 06)
    if (digits.startsWith('6') || digits.startsWith('06')) {
      return { country: 'NL', type: 'mobile' };
    }
    
    // Dutch landline format (starts with 0 + area code or direct area code)
    if (digits.startsWith('0') && digits.length > 1) {
      const afterZero = digits.charAt(1);
      if (/[1-578]/.test(afterZero)) {
        return { country: 'NL', type: 'landline' };
      }
    }
    
    // Direct landline (starts with 1,2,3,4,5,7,8)
    if (/^[1-578]/.test(digits) && digits.length >= 2) {
      return { country: 'NL', type: 'landline' };
    }
    
    return null;
  }

  /**
   * Format phone number progressively as user types
   * @param {string} value - Raw input value
   * @param {Object} options - Formatting options
   * @returns {string} Formatted phone number
   */
  function formatPhoneNumber(value, options = {}) {
    // Handle empty or invalid input
    if (!value || typeof value !== 'string') {
      return '';
    }

    // Extract only digits
    const digits = extractDigits(value);
    
    // Return empty for no digits
    if (!digits) return '';
    
    // Don't format if too long (safety limit)
    if (digits.length > 15) return digits;

    // Progressive formatting based on what user has typed
    return formatDutchNumber(digits);
  }

  /**
   * Format Dutch phone numbers progressively
   * @param {string} digits - Digits only string
   * @returns {string} Formatted number
   */
  function formatDutchNumber(digits) {
    // International format starting with 31
    if (digits.startsWith('31')) {
      return formatInternational(digits);
    }
    
    // Mobile format starting with 6 or 06
    if (digits.startsWith('6') || digits.startsWith('06')) {
      return formatMobile(digits);
    }
    
    // Landline format starting with 0 + area code
    if (digits.startsWith('0') && digits.length > 1 && /[1-578]/.test(digits.charAt(1))) {
      return formatLandline(digits);
    }
    
    // Direct landline (area code without 0)
    if (/^[1-578]/.test(digits) && digits.length >= 2) {
      return formatLandline('0' + digits);
    }
    
    // Return as-is for unrecognized patterns (let user continue typing)
    return digits;
  }

  /**
   * Format international numbers (+31...)
   */
  function formatInternational(digits) {
    if (digits.length <= 2) return digits;
    
    const withoutCountry = digits.slice(2);
    
    // Build progressive format
    let formatted = '(+31)';
    
    if (withoutCountry.length > 0) {
      // First digit (mobile 6 or landline)
      formatted += ' ' + withoutCountry.charAt(0);
      
      if (withoutCountry.length > 1) {
        // Add space after first digit for mobile, or after area code for landline
        if (withoutCountry.startsWith('6')) {
          // Mobile: (+31) 6 1234 5678
          formatted += formatMobileDigits(withoutCountry.slice(1));
        } else {
          // Landline: (+31) 20 1234 5678
          formatted += formatLandlineDigits(withoutCountry.slice(1));
        }
      }
    }
    
    return formatted;
  }

  /**
   * Format mobile numbers (06... or 6...)
   */
  function formatMobile(digits) {
    let workingDigits = digits;
    
    // Remove leading 0 if present for processing
    if (workingDigits.startsWith('06')) {
      workingDigits = workingDigits.slice(1);
    }
    
    // Start with (+31)
    let formatted = '(+31)';
    
    if (workingDigits.length > 0) {
      formatted += ' ' + workingDigits.charAt(0); // The '6'
      
      if (workingDigits.length > 1) {
        formatted += formatMobileDigits(workingDigits.slice(1));
      }
    }
    
    return formatted;
  }

  /**
   * Format landline numbers
   */
  function formatLandline(digits) {
    // Ensure starts with 0
    if (!digits.startsWith('0')) {
      digits = '0' + digits;
    }
    
    let formatted = '(+31)';
    
    if (digits.length > 1) {
      // Get area code (without the 0)
      const areaStart = digits.slice(1);
      
      if (areaStart.length > 0) {
        // Determine area code length (usually 2 digits)
        const areaCode = areaStart.slice(0, 2);
        formatted += ' ' + areaCode;
        
        if (areaStart.length > 2) {
          formatted += formatLandlineDigits(areaStart.slice(2));
        }
      }
    }
    
    return formatted;
  }

  /**
   * Format the remaining digits for mobile numbers
   */
  function formatMobileDigits(remainingDigits) {
    if (!remainingDigits) return '';
    
    let formatted = '';
    
    // Group as: 1234 5678
    if (remainingDigits.length > 0) {
      formatted += ' ' + remainingDigits.slice(0, 4);
      
      if (remainingDigits.length > 4) {
        formatted += ' ' + remainingDigits.slice(4, 8);
      }
    }
    
    return formatted;
  }

  /**
   * Format the remaining digits for landline numbers
   */
  function formatLandlineDigits(remainingDigits) {
    if (!remainingDigits) return '';
    
    let formatted = '';
    
    // Group as: 1234 5678 or 123 4567 depending on length
    if (remainingDigits.length > 0) {
      formatted += ' ' + remainingDigits.slice(0, 4);
      
      if (remainingDigits.length > 4) {
        formatted += ' ' + remainingDigits.slice(4);
      }
    }
    
    return formatted;
  }

  /**
   * Validate phone number format
   * @param {string} value - Phone number to validate
   * @param {Object} options - Validation options
   * @returns {boolean} Is valid
   */
  function validatePhoneNumber(value, options = {}) {
    const { allowEmpty = false } = options;
    
    if (!value || !value.trim()) {
      return allowEmpty;
    }

    const digits = extractDigits(value);
    
    // Check if we can detect a valid type
    const phoneType = detectPhoneType(digits);
    if (!phoneType) return false;
    
    // Validate based on type and length
    if (phoneType.type === 'mobile') {
      // Mobile: 6 + 8 digits = 9 total (or 06 + 8 = 10 total)
      return digits.length === 9 || (digits.length === 10 && digits.startsWith('06'));
    }
    
    if (phoneType.type === 'landline') {
      // Landline: area code + number = 9-10 digits total
      return digits.length >= 9 && digits.length <= 10;
    }
    
    if (phoneType.type === 'international') {
      // International: 31 + 9 digits = 11 total
      return digits.length === 11;
    }
    
    return false;
  }

  /* -------------------------------------------------------------------
     2. Cursor Position Management
  -------------------------------------------------------------------*/

  /**
   * Calculate new cursor position after formatting
   * @param {string} oldValue - Value before formatting
   * @param {string} newValue - Value after formatting
   * @param {number} oldCursor - Cursor position before formatting
   * @returns {number} New cursor position
   */
  function calculateCursorPosition(oldValue, newValue, oldCursor) {
    // Count digits before cursor in old value
    const digitsBeforeCursor = oldValue
      .slice(0, oldCursor)
      .replace(REGEX_CACHE.DIGITS_ONLY, '').length;
    
    // Find position after same number of digits in new value
    let newCursor = 0;
    let digitCount = 0;
    
    for (let i = 0; i < newValue.length; i++) {
      if (REGEX_CACHE.HAS_DIGIT.test(newValue[i])) {
        digitCount++;
        if (digitCount === digitsBeforeCursor) {
          newCursor = i + 1;
          break;
        }
      }
    }
    
    // If we couldn't match the digit count, put cursor at end
    if (digitCount < digitsBeforeCursor || newCursor === 0) {
      newCursor = newValue.length;
    }
    
    return newCursor;
  }

  /* -------------------------------------------------------------------
     3. Input Event Handler
  -------------------------------------------------------------------*/

  /**
   * Handle input formatting with debounce
   * @param {HTMLInputElement} input - Tel input element
   */
  function handlePhoneInput(input) {
    // Clear existing timeout
    if (input._formatTimeout) {
      clearTimeout(input._formatTimeout);
    }

    // Get formatting options from data attributes
    const options = {
      country: input.dataset.phoneCountry || 'NL',
      preserveInvalid: input.dataset.phonePreserveInvalid !== 'false'
    };

    // Debounce formatting
    input._formatTimeout = setTimeout(() => {
      const cursorPos = input.selectionStart;
      const oldValue = input.value;
      const formattedValue = formatPhoneNumber(oldValue, options);

      // Only update if value changed
      if (formattedValue !== oldValue) {
        input.value = formattedValue;
        
        // Restore cursor position
        const newCursorPos = calculateCursorPosition(oldValue, formattedValue, cursorPos);
        input.setSelectionRange(newCursorPos, newCursorPos);
      }
    }, 100);
  }

  /* -------------------------------------------------------------------
     4. Form Initialization
  -------------------------------------------------------------------*/

  /**
   * Initialize phone formatting on tel inputs
   * @param {HTMLElement|Document} container - Container to search within
   */
  function initPhoneFormatting(container = document) {
    // Find all tel inputs
    const telInputs = container.querySelectorAll('input[type="tel"]');
    
    telInputs.forEach(input => {
      // Skip if already initialized
      if (input._phoneFormatInitialized) return;
      
      // Mark as initialized
      input._phoneFormatInitialized = true;
      
      // Add input handler
      input.addEventListener('input', () => handlePhoneInput(input));
      
      // Format on blur for cleanup
      input.addEventListener('blur', () => {
        // Clear any pending timeout
        if (input._formatTimeout) {
          clearTimeout(input._formatTimeout);
        }
        
        // Final format without debounce
        const options = {
          country: input.dataset.phoneCountry || 'NL',
          preserveInvalid: input.dataset.phonePreserveInvalid !== 'false'
        };
        input.value = formatPhoneNumber(input.value, options);
      });
      
      // Format initial value if present
      if (input.value) {
        const options = {
          country: input.dataset.phoneCountry || 'NL',
          preserveInvalid: input.dataset.phonePreserveInvalid !== 'false'
        };
        input.value = formatPhoneNumber(input.value, options);
      }
    });
  }

  /* -------------------------------------------------------------------
     5. Public API
  -------------------------------------------------------------------*/

  // Export to window for external use
  window.PhoneFormat = {
    format: formatPhoneNumber,
    validate: validatePhoneNumber,
    init: initPhoneFormatting,
    extractDigits: extractDigits
  };

  /* -------------------------------------------------------------------
     6. Auto-initialization
  -------------------------------------------------------------------*/
  
  // Initialize on page load (Slater handles DOM ready)
  initPhoneFormatting();
  
  // Re-initialize when Webflow updates DOM (for dynamic content) with safety check
  if (typeof Webflow !== 'undefined' && Webflow.push) {
    try {
      Webflow.push(() => {
        initPhoneFormatting();
      });
    } catch (e) {
      console.warn('Webflow integration failed for phone formatting:', e);
    }
  }
  
  // Observe for dynamically added forms
  const observer = new MutationObserver((mutations) => {
    mutations.forEach(mutation => {
      mutation.addedNodes.forEach(node => {
        if (node.nodeType === 1) { // Element node
          if (node.matches && node.matches('input[type="tel"]')) {
            initPhoneFormatting(node.parentElement);
          } else if (node.querySelectorAll) {
            const telInputs = node.querySelectorAll('input[type="tel"]');
            if (telInputs.length > 0) {
              initPhoneFormatting(node);
            }
          }
        }
      });
    });
  });
  
  // Start observing
  observer.observe(document.body, {
    childList: true,
    subtree: true
  });
})();